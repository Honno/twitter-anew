# tanew/commands/status.py

from .base import Base

import util

import meta

from datetime import date

import tweepy

import logging

DEFAULT_LIST_NAME = "Old"
DEFAULT_LIST_DESCRIPTION = "List of members followed as of {}, generated by {}".format(str(date.today()), meta.URL)[:100]
DEFAULT_LIST_MODE = "private"

class CreateList(Base):
    def run(self, auth):
        if self.options['--verbose']:
            logging.basicConfig(level=logging.INFO)
        log = logging.getLogger(__name__)

        list_name_arg = self.options['--list-name']
        list_name = list_name_arg if list_name_arg is not None else DEFAULT_LIST_NAME
        log.info("List name: {}".format(list_name))

        list_desc = DEFAULT_LIST_DESCRIPTION
        log.info("List description: {}".format(list_desc))

        list_mode_arg = self.options['--list-mode']
        list_mode = list_mode_arg if (list_mode_arg == "public") | (list_mode_arg == "private") else DEFAULT_LIST_MODE
        log.info("List mode: {}".format(list_mode))

        try:
            api = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True)

            file_arg = self.options['<file>']
            friends_ids = util.read_friends_ids(file_arg) if file_arg is not None else api.friends_ids()

            friends_no = friends_ids.__len__()
            if friends_no > meta.LIST_MAX:
                log.warning("Multiple lists are required as there are over 5000 members to create a list")
                friends_ids_matrix = []
                index = -1
                while friends_ids.__len__() != 0:
                    index += 1
                    friends_ids_matrix.append([])
                    range_stop = friends_ids.__len__() if friends_ids.__len__() < meta.LIST_MAX else meta.LIST_MAX
                    for i in range(0, range_stop):
                        friends_ids_matrix[index].append(friends_ids.pop())

                for i in range(0, friends_ids_matrix.__len__()):
                    list_name_numbered = list_name + " {}".format(i + 1)
                    self.create_list(log, api, list_name_numbered, list_mode, list_desc, friends_ids_matrix[i])
            elif friends_no > 0:
                self.create_list(log, api, list_name, list_mode, list_desc, friends_ids)
            else:
                print("No user ids found!")

        except tweepy.TweepError as te:
            log.error(util.parse_te(te))
            if te.api_code == 104:
                log.critical("Twitter's API locks users from adding members to lists after a certain point.")
                print("Please use the command 'tanew addtolist <slug>' to add to the existing list at a later point.")
        except FileNotFoundError as fnfe:
            log.error("{} file was not found".format(file_arg))


    def create_list(self, log, api, name, mode, desc, friends_ids):
        log.info("Creating list {}".format(name))
        twitter_list = api.create_list(name, mode, desc)

        for friends_id in friends_ids:
            log.info("Adding {} to list".format(friends_id))
            api.add_list_member(list_id=twitter_list.id, id=friends_id)
