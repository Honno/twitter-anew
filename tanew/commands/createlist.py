# tanew/commands/status.py

from .base import Base

import tanew.util as util

import tanew.meta as meta

from datetime import date

import tweepy

import logging

DEFAULT_LIST_NAME = "Old"
DEFAULT_LIST_DESCRIPTION = "List of members followed as of {}, generated by {}".format(str(date.today()), meta.URL)[:100]
DEFAULT_LIST_MODE = "private"

class CreateList(Base):
    def run(self, auth):
        if self.options['--verbose']:
            logging.basicConfig(level=logging.INFO)
        log = logging.getLogger(__name__)

        list_name_arg = self.options['--list-name']
        list_name = list_name_arg if list_name_arg is not None else DEFAULT_LIST_NAME
        log.info("List name: {}".format(list_name))

        list_desc = DEFAULT_LIST_DESCRIPTION
        log.info("List description: {}".format(list_desc))

        list_mode_arg = self.options['--list-mode']
        list_mode = list_mode_arg if (list_mode_arg == "public") | (list_mode_arg == "private") else DEFAULT_LIST_MODE
        log.info("List mode: {}".format(list_mode))

        try:
            api = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True)

            file_arg = self.options['<file>']
            friends_ids = util.read_friends_ids(file_arg) if file_arg is not None else api.friends_ids()

            friends_no = len(friends_ids)
            if friends_no > meta.LIST_MAX:
                log.warning("Multiple lists are required as there are over 5000 members to create a list")

                friends_ids_matrix = [friends_ids[i:i+meta.LIST_MAX] for i in range(0, len(friends_ids), meta.LIST_MAX)]

                for friends_ids_block in friends_ids_matrix:
                    list_name_numbered = list_name + " {}".format(i + 1)
                    self.create_list(log, api, list_name_numbered, list_mode, list_desc, friends_ids_block)
                    
            elif friends_no > 0:
                self.create_list(log, api, list_name, list_mode, list_desc, friends_ids)
            else:
                print("No user ids found!")

        except tweepy.TweepError as te:
            log.error(util.parse_te(te))
        except FileNotFoundError as fnfe:
            log.error("{} file was not found".format(file_arg))
        except NotImplementedError as ne:
            log.error(ne)
            print("Please contact the author if you'd like to see this functionality, as he needs some motivation first that anybody would require it!")


    def create_list(self, log, api, name, mode, desc, friends_ids):
        log.info("Creating list {}".format(name))
        twitter_list = api.create_list(name, mode, desc)

        friends_ids_slices = [friends_ids[i:i+meta.CREATE_ALL_MAX] for i in range(0, len(friends_ids), meta.CREATE_ALL_MAX)]

        for friends_ids_slice in friends_ids_slices:
            log.info("Adding user {} to list".format(friends_ids_slice))
            api.add_list_members(list_id=twitter_list.id, user_id=friends_ids_slice)

        if util.check_list_size(api, twitter_list, len(friends_ids)):
            log.critical(meta.LIST_SIZE_UNDER_LOG)
            print(meta.LIST_SIZE_UNDER_PRINT)